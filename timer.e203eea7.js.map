{"version":3,"sources":["js/timer/timer.js"],"names":["CountdownTimer","constructor","targetDate","daysEl","document","querySelector","hoursEl","minsEl","secsEl","intervalId","start","setInterval","time","Date","now","timeLeft","getTimeComponents","updateClockface","days","pad","Math","floor","hours","mins","secs","value","String","padStart","textContent","timer"],"mappings":";;;AA6CA,aA7CA,QAAA,yBAEA,MAAMA,EACJC,aAAY,WAAEC,IACPC,KAAAA,OAASC,SAASC,cAAc,2BAChCC,KAAAA,QAAUF,SAASC,cAAc,4BACjCE,KAAAA,OAASH,SAASC,cAAc,2BAChCG,KAAAA,OAASJ,SAASC,cAAc,2BAChCH,KAAAA,WAAaA,EACbO,KAAAA,WAAa,KAGpBC,QACOD,KAAAA,WAAaE,YAAY,KACtBC,MAAAA,EAAO,KAAKV,WAAaW,KAAKC,MAC9BC,EAAW,KAAKC,kBAAkBJ,GACnCK,KAAAA,gBAAgBF,IACpB,KAGLC,kBAAkBJ,GAMT,MAAA,CAAEM,KALI,KAAKC,IAAIC,KAAKC,MAAMT,EAAQ,QAK1BU,MAJD,KAAKH,IAAIC,KAAKC,MAAOT,EAAQ,MAAyB,OAI9CW,KAHT,KAAKJ,IAAIC,KAAKC,MAAOT,EAAQ,KAAoB,MAGlCY,KAFf,KAAKL,IAAIC,KAAKC,MAAOT,EAAQ,IAAc,OAK1DO,IAAIM,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnCV,iBAAgB,KAAEC,EAAF,MAAQI,EAAR,KAAeC,EAAf,KAAqBC,IAC9BrB,KAAAA,OAAOyB,eAAiBV,IACxBZ,KAAAA,QAAQsB,eAAiBN,IACzBf,KAAAA,OAAOqB,eAAiBL,IACxBf,KAAAA,OAAOoB,eAAiBJ,KAIjC,MAAMK,EAAQ,IAAI7B,EAAe,CAC/BE,WAAY,IAAIW,KAAK,kBAGvBgB,EAAMnB","file":"timer.e203eea7.js","sourceRoot":"../src","sourcesContent":["import '../../sass/timer.scss';\n\nclass CountdownTimer {\n  constructor({ targetDate }) {\n    this.daysEl = document.querySelector('span[data-value=\"days\"]');\n    this.hoursEl = document.querySelector('span[data-value=\"hours\"]');\n    this.minsEl = document.querySelector('span[data-value=\"mins\"]');\n    this.secsEl = document.querySelector('span[data-value=\"secs\"]');\n    this.targetDate = targetDate;\n    this.intervalId = null;\n  }\n\n  start() {\n    this.intervalId = setInterval(() => {\n      const time = this.targetDate - Date.now();\n      const timeLeft = this.getTimeComponents(time);\n      this.updateClockface(timeLeft);\n    }, 1000);\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n\n  updateClockface({ days, hours, mins, secs }) {\n    this.daysEl.textContent = `${days}`;\n    this.hoursEl.textContent = `${hours}`;\n    this.minsEl.textContent = `${mins}`;\n    this.secsEl.textContent = `${secs}`;\n  }\n}\n\nconst timer = new CountdownTimer({\n  targetDate: new Date('Jul 17, 2021'),\n});\n\ntimer.start();\n"]}