{"version":3,"sources":["js/promisification/promisification.js"],"names":["delay","ms","promise","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","id","logSuccess","logError","warn","amount","catch"],"mappings":";AACA,MAAMA,EAAQC,IAMLC,OALS,IAAIC,QAAQC,GAC1BC,WAAW,KACTD,KAAWH,MACVA,KAKDK,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,GAGjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,KAO1Bd,OANS,IAAIC,QAAQC,IAC1BA,EACEW,EAASE,IAAIC,GAASA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,OAOzFJ,EAAgBH,EAAO,SAASD,KAAKF,QAAQW,OAC7CL,EAAgBH,EAAO,QAAQD,KAAKF,QAAQW,OAG5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,GACf,IAAIxB,QAAQ,CAACyB,EAAWC,KACvB7B,MAAAA,EAAQoB,EAA0B,IAAK,KAE7Cf,WAAW,KACUkB,KAAKE,SAAW,GAGjCG,EAAU,CAAEE,GAAIH,EAAYG,GAAIvB,KAAMP,IAEtC6B,EAAQF,EAAYG,KAErB9B,KAID+B,EAAa,EAAGD,GAAAA,EAAIvB,KAAAA,MACxBC,QAAQC,mBAAmBqB,kBAAmBvB,QAG1CyB,EAAWF,IACftB,QAAQyB,qCAAqCH,+BAa/CJ,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAE/DN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH","file":"promisification.86fb15a3.js","sourceRoot":"../src","sourcesContent":["// Task 1\nconst delay = ms => {\n  const promise = new Promise(resolve =>\n    setTimeout(() => {\n      resolve(`${ms}`);\n    }, ms),\n  );\n  return promise;\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n// Task 2\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username) => {\n  const promise = new Promise(resolve => {\n    resolve(\n      allUsers.map(user => (user.name === username ? { ...user, active: !user.active } : user)),\n    );\n  });\n\n  return promise;\n};\n\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n// Task 3\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  return new Promise((onSuccess, onError) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        onSuccess({ id: transaction.id, time: delay });\n      } else {\n        onError(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"]}